#%RAML 0.8

# TODO: see variables, and extractthem

title: Pending Link Api
baseUri: http://pending-link.herokuapp.com
#  /{version}
#version: v1

# traits:
#  - paged:
#      queryParameters:
#        pages:
#          description: The number of pages to return
#          type: number
#  - secured: !include http://raml-example.com/secured.yml

## Main ressource
/links:
  description: Just some links to store and them retrieve
  # resource: link:string, timestamp:timestamp, tag:list<string>, archive:boolean, comment:string
  # is: [ paged, secured ]
  get:
    # Â§todo: see optional option
    description: |
      Retrieve list of existing links
  post:
    description: |
      Create a new link
  /{linkId}:
    get:
      description: Retrieve link representation
      responses:
        200:
          body:
            application/json:
              example: |
                { "link": "http://blog.octo.com/designer-une-api-rest/",
                  "archive": true,
                  "timestamp": "2015-02-16T09:25:43.511Z",
                  "tags": ["rest", "api"],
                  "comment": "Api Rocks"
                }
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "id": "<<baseUri>>",
                  "properties": {
                    "link": {
                      "id": "<<baseUri>>/link",
                      "type": "string" },
                    "archive": {
                      "id": "<<baseUri>>/archive",
                      "type": "boolean" },
                    "timestamp": {
                      "id": "<<baseUri>>/timestamp",
                      "type": "string"},
                    "tags": {
                      "id": "<<baseUri>>/tags",
                      "type": "array",
                      "items": [{
                          "id": "<<baseUri>>/tags/0",
                          "type": "string"},
                        {"id": "<<baseUri>>/tags/1",
                          "type": "string"}]},
                    "comment": {
                      "id": "<<baseUri>>/comment",
                      "type": "string"}},
                  "required": ["link","timestamp"]
                }
            application/xml:
    delete:
      description: |
        This method will *delete* an **individual link**
    put:
      description: |
        This method will *replace* an **individual link**
    patch:
      description: |
        This method will do a partial *update* on an **individual link**
